# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19lejTFEx2_SvyD8Q6RsI-wW1wpAx8fXW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

df = pd.read_csv('/content/sample_data/spam.csv',encoding="latin")
df.head()

df.info()

df.isna().sum()

df.rename({"v1":"label","v2":"text"},inplace=True,axis=1)

df.tail()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['label'] = le.fit_transform(df['label'])

from sklearn.model_selection import train_test_split 
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20, random_state = 0)

print("Before OverSampling, counts of label '1': {}".format(sum(y_train == 1)))
print("Before OverSampling, counts of label '0': {} \n".format(sum(y_train == 0)))
from imblearn.over_sampling import SMOTE
sm = SMOTE(random_state = 2)
X_train_res, y_train_res = sm.fit_resample(X_train, y_train.ravel())
print('After OverSampling, the shape of train_X: {}'.format(X_train_res.shape)) 
print('After OverSampling, the shape of train_y: {} \n'.format(y_train_res.shape))
print("After OverSampling, counts of label '1': {}".format(sum(y_train_res == 1))) 
print("After OverSampling, counts of label '': {}".format(sum(y_train_res == 0)))

nltk.download("stopwords")

import nltk 
from nltk.corpus import stopwords 
from nltk.stem import PorterStemmer

import re
corpus = []
length = len(df)

for i in range(0, length):
text = re.sub("[^a-zA-Z0-9]"," ",df["text"][i])
text text.lower()
text = text.split()
pe = Porterstemmer()
stopword = stopwords.words ("english")
text = [pe.stem(word) for word in text if not word in set(stopword)]
text = " ".join(text)
corpus.append(text)

from sklearn.feature_extraction.text import CountVectorizer 
CV CountVectorizer (max_features=35000)  
X = cv.fit_transform(corpus).toarray()

import pickle 
pickle.dump(cv, open('cv1.pkl', 'wb'))

df["label"].value_counts().plot(kind="bar",figsize=(12,6)) 
plt.xticks(np.arange(2), ('Non spam', 'spam'), rotation=0);

